name: IaC Security Analysis

on:
  pull_request:
    paths:
      - "**/*.tf"
      - "**/*.tfvars"
      - "**/Chart.yaml"
      - "**/*.yaml"
      - "**/*.yml"
    branches: [main, develop]

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  iac-analysis:
    runs-on: ubuntu-latest
    name: Infrastructure Analysis

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: '3.12.0'

      - name: Install Dependencies
        run: npm ci

      - name: Build iac-explain
        run: npm run build

      - name: Run Terraform Analysis
        id: terraform-analysis
        run: |
          # Find all Terraform directories
          terraform_dirs=$(find . -name "*.tf" -type f | xargs dirname | sort -u | grep -v ".terraform")

          for dir in $terraform_dirs; do
            echo "Analyzing Terraform in $dir"
            cd "$dir"

            # Initialize without backend
            terraform init -backend=false

            # Create plan
            terraform plan -no-color -out=tfplan.bin || true

            # Convert to JSON if plan exists
            if [ -f tfplan.bin ]; then
              terraform show -json tfplan.bin > tfplan.json

              # Run iac-explain analysis
              node ../../dist/packages/mcp-server/cli.js analyze-plan \
                --workspace . \
                --plan-path tfplan.json \
                --output analysis-${{ github.sha }}.md
            fi

            cd - > /dev/null
          done

      - name: Run Kubernetes Analysis
        id: kubernetes-analysis
        run: |
          # Find all Kubernetes manifest files
          k8s_files=$(find . -name "*.yaml" -o -name "*.yml" | grep -v ".github" | grep -v "node_modules")

          for file in $k8s_files; do
            echo "Analyzing Kubernetes manifest: $file"

            node dist/packages/mcp-server/cli.js validate-k8s \
              --manifests-dir $(dirname "$file") \
              --output k8s-analysis-$(basename "$file").md || true
          done

      - name: Comment Analysis Results
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Find all analysis files
            const analysisFiles = fs.readdirSync('.').filter(f =>
              f.startsWith('analysis-') || f.startsWith('k8s-analysis-')
            );

            if (analysisFiles.length === 0) {
              console.log('No analysis files found');
              return;
            }

            let comment = '# üîç Infrastructure Security Analysis\n\n';

            for (const file of analysisFiles) {
              try {
                const content = fs.readFileSync(file, 'utf8');
                comment += `## ${file}\n\n${content}\n\n`;
              } catch (error) {
                console.error(`Error reading ${file}:`, error);
              }
            }

            comment += '\n---\n*Analysis performed by [iac-explain](https://github.com/your-org/iac-explain)*';

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Upload Analysis Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: iac-analysis-results
          path: |
            analysis-*.md
            k8s-analysis-*.md
            **/tfplan.json
          retention-days: 30

      # Optional: Fail the job if critical security issues are found
      - name: Check for Critical Issues
        run: |
          critical_count=$(grep -r "severity.*crit" analysis-*.md k8s-analysis-*.md 2>/dev/null | wc -l || echo 0)

          if [ "$critical_count" -gt 0 ]; then
            echo "‚ùå Found $critical_count critical security issues"
            echo "::error::Critical security issues detected. Please review and fix before merging."
            # Uncomment the next line to fail the build on critical issues
            # exit 1
          else
            echo "‚úÖ No critical security issues found"
          fi